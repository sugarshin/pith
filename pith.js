// Generated by CoffeeScript 1.9.0

/*!
 * @license pith
 * (c) sugarshin
 * License: MIT
 */

(function() {
  "use strict";
  var __slice = [].slice,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  (function(root, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
      module.exports = factory();
    } else {
      root.Pith || (root.Pith = factory());
    }
  })(this, function() {
    var Base, Eventz, Model, Pith, View, previousPith;
    previousPith = Pith;
    Eventz = (function() {
      function Eventz() {
        this._events = {};
      }

      Eventz.prototype.on = function(event, handler) {
        var _base;
        this._events || (this._events = {});
        if (typeof handler !== 'function') {
          throw new Error('on only accepts instances of Function');
        }
        (_base = this._events)[event] || (_base[event] = []);
        this._events[event].push(handler);
        return this;
      };

      Eventz.prototype.once = function(event, handler) {
        var _self;
        this.on(event, _self = (function(_this) {
          return function() {
            _this.off(event, _self);
            return handler.apply(_this, arguments);
          };
        })(this));
        return this;
      };

      Eventz.prototype.off = function(event, handler) {
        var callbacks, cb, i, _i, _len, _ref;
        if (!event) {
          this._events || (this._events = {});
          return this;
        }
        callbacks = (_ref = this._events) != null ? _ref[event] : void 0;
        if (!callbacks) {
          return this;
        }
        if (handler) {
          for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {
            cb = callbacks[i];
            if (!(cb === handler)) {
              continue;
            }
            callbacks.splice(i, 1);
            this._events[event] = callbacks;
          }
        } else {
          delete this._events[event];
        }
        return this;
      };

      Eventz.prototype.emit = function() {
        var args, callbacks, cb, event, _i, _len, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        event = args.shift();
        callbacks = (_ref = this._events) != null ? _ref[event] : void 0;
        if (!callbacks) {
          return this;
        }
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          cb = callbacks[_i];
          if (cb.apply(this, args) === false) {
            break;
          }
        }
        return this;
      };

      Eventz.prototype.addListener = Eventz.prototype.on;

      Eventz.prototype.removeListener = Eventz.prototype.off;

      Eventz.prototype.trigger = Eventz.prototype.emit;

      return Eventz;

    })();
    Base = (function(_super) {
      __extends(Base, _super);

      function Base(_at_attrs) {
        this.attrs = _at_attrs;
      }

      Base.prototype.get = function(name) {
        return this.attrs[name];
      };

      Base.prototype.set = function(name, val) {
        return this.attrs[name] = val;
      };

      Base["extends"] = function(child, parent) {
        var ctor, key;
        ctor = function() {
          this.constructor = child;
        };
        for (key in parent) {
          if (parent.hasOwnProperty(key)) {
            child[key] = parent[key];
          }
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child;
      };

      return Base;

    })(Eventz);
    Model = (function(_super) {
      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      return Model;

    })(Base);
    View = (function(_super) {
      __extends(View, _super);

      function View() {
        return View.__super__.constructor.apply(this, arguments);
      }

      return View;

    })(Base);
    return Pith = (function() {
      function Pith() {}

      Pith.VERSION = '0.0.1';

      Pith.noConflict = function() {
        root.Pith = previousPith;
        return this;
      };

      Pith.Model = Model;

      Pith.View = View;

      return Pith;

    })();
  });

}).call(this);
